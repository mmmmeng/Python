其实我一直有一个纠结的点想不明白

就是当我执行到这里的时候，怎么往下走？

意思就是，如果上面branch_length为20的时候，那么print('向右转20度，画右分叉')以后，再次调用draw_branch（），按道理来说就不执行了，那不就是停了吗？
既然已经停了，那下面绘制左侧树枝还有返回之前的树枝都怎么执行啊？
因为我觉得看这个代码，感觉根本不会走下面的代码

嗯 我来跟你说 其实很简单 你没想通 

我们这么说吧，给每次调用的方法编个号 顺序号 可以吧

那我们先给每次调用的方法编个号吧 并且模拟一下真实的执行过程
draw_branch（60） 参数是60
开始执行：
draw1（60）：注意 这个是draw1 这里会画一个分支
开始判断，》5 所以可以继续走对吧嗯 那么会走if里的语句
if开始，画向右分支，开始调用draw2（45）对吧 
	draw2（45）：这里会画一个分支
	大于5 所以继续走if分支 画向右分支，开始调用draw3（30） 对吧
		draw3（30）：这里会画一个分支
		大于5 所以继续走if分支，画向右分支，开始调用draw4（15） 
			draw4（15）：这里会画一个分支
			大于5 所以继续走if分支，画向右分支，开始调用draw5（0）
				draw5（0）：这里因为不满足条件，所以不画了
				小于5 所以end 注意，这里end的只是draw5方法 4321方法都还没有结束啊？
				你看我写的方法的结构 一层一层的 所以 我是在draw1里面调用的2,2里面调用的3,3里面调用的4,4里面调用的5，对不对嗯嗯 那么 5结束了，凭什么1345也要结束哦对哦 所以 5结束了，会继续执行4，直到4结束，会继续执行外层的3,3结束，会继续执行外层的2，继续执行1最后，直到1结束，整个过程才算结束 捋顺这个顺序结构
				
				所以，从画图的现象上来看，发现，小海龟会先画右边的基础树杈，一直画到底，对吧嗯嗯 那么画到底的过程，其实就是不断开始新方法的过程，当最后的不画了以后，你会发现小海龟还是掉头，我们在draw5掉头的，所以会继续执行4，
				先前画右分叉，我们都是在***这里开启新方法，暂停的对吧 嗯嗯 所以 当内层方法执行完后，外层的方法会继续从这里执行 所以draw4，会继续画左分叉，然后左分叉这里也会去调用draw方法，这是就是draw6，又开启了一个方法，所以就又会走一遍之前的流程 这里明白不嗯
				嗯 所以 当左分叉不能画的时候，他就会返回上一层，以此类推，一直推到最外层 最后执行完毕 就画完了 所以这就是为什么，我们只画了4层树，这个方法却调用了31次。天呐，好复杂，这我怎么能写出来 上午付宏旭给我讲的，听你这样讲，我就知道他说的啥意思了 嗯 我看她也是截图给你说的嘛，其实就是开启新方法的过程，我的误区就是一直以为 嗯 其实一开始已经调用了好多次了？？在干嘛呀？
